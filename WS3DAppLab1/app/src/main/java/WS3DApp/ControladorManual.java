package WS3DApp;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Juan Luis
 */

import ws3dproxy.WS3DProxy;
import ws3dproxy.model.World;
import ws3dproxy.model.Thing;
import ws3dproxy.model.Creature;

import java.util.List;
import java.util.ArrayList;

import javax.swing.*;
import java.awt.event.*;
//import java.util.concurrent.CopyOnWriteArrayList;

public class ControladorManual extends JFrame implements KeyListener {

    /**
     * Creates new form ControladorManual
     */
    
    //Instancias
    private App app;
    private WS3DProxy proxy;
    
    //Creature
    private double valorX_creature          = 0;
    private double valorY_creature          = 0;
    private double valorPitch_creature      = 0;
    private double linearVelocityRightWheel = 0;
    private double linearVelocityLeftWheel  = 0;
    private double angularVelocityCreature  = 0;
    
    //Things
    private double valorType_thing          = 0;
    private double valorX_thing             = 0;
    private double valorY_thing             = 0;
    
    //Bricks
    private double valorItem_brick          = 0;
    private double valorX1_brick            = 0;
    private double valorY1_brick            = 0;
    private double valorX2_brick            = 0;
    private double valorY2_brick            = 0;
    
    //Map New Point
    private double valorX_map               = 0;
    private double valorY_map               = 0;
    private double valorLinearVelocity_map  = 0;
    
    //Lista Creatures
    private List<Creature> creatureList;
    private Creature selectedCreature;
    //Thread Safe
    // CopyOnWriteArrayList<Object>
    
    //Primitive data types
    //private Integer currentCreature;
    private String  currentVisibleThings;
    
    
    //Constructores
    public ControladorManual(App _app, WS3DProxy _proxy){
        app                   = _app;
        proxy                 = _proxy;
        this.creatureList     = app.getCreatureList();
        this.selectedCreature = app.getSelectedCreature();
                
        initComponents();    
        //valueListThings.setModel(new DefaultListModel<>());
        ControlPanel.addKeyListener(this);
        
    /*    ItemCreatures.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //currentCreature = ItemCreatures.getSelectedIndex();
                getCurrentVisibleThings();
            }
    */
    /*    ItemCreatures.addActionListener( e -> {
            //currentCreature = ItemCreatures.getSelectedIndex();
            Object selectedItem = ItemCreatures.getSelectedItem();
            if (selectedItem != null) {
                System.out.println(selectedItem);
                getCurrentVisibleThings(selectedItem);    
            }   
    */
    //});        
    }
    
    public ControladorManual() {
        initComponents();
    }
    
    //Getters y Setters
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        NewCreature = new javax.swing.JButton();
        valorXcreature = new javax.swing.JTextField();
        valorYcreature = new javax.swing.JTextField();
        valorPitchCreature = new javax.swing.JTextField();
        TypeThing = new javax.swing.JComboBox<>();
        valorXThing = new javax.swing.JTextField();
        valorYthing = new javax.swing.JTextField();
        Xcreature = new javax.swing.JLabel();
        Ycreature = new javax.swing.JLabel();
        PitchCreature = new javax.swing.JLabel();
        NewThing = new javax.swing.JButton();
        Xthing = new javax.swing.JLabel();
        Ything = new javax.swing.JLabel();
        ItemThing = new javax.swing.JComboBox<>();
        NewBrick = new javax.swing.JButton();
        ItemBrick = new javax.swing.JComboBox<>();
        valorX1Brick = new javax.swing.JTextField();
        valorY1Brick = new javax.swing.JTextField();
        valorX2Brick = new javax.swing.JTextField();
        valorY2Brick = new javax.swing.JTextField();
        X1brick = new javax.swing.JLabel();
        Y1brick = new javax.swing.JLabel();
        X2brick = new javax.swing.JLabel();
        Y2brick = new javax.swing.JLabel();
        ItemCreatures = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ControlPanel = new javax.swing.JTextArea();
        NewPoint = new javax.swing.JButton();
        valorXmap = new javax.swing.JTextField();
        valorYmap = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        valorVelMap = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        valueListThings = new javax.swing.JList<>();
        Title = new javax.swing.JLabel();
        ThingsInVision = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Leaflet = new javax.swing.JTable();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        NewCreature.setText("New Creature");
        NewCreature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewCreatureActionPerformed(evt);
            }
        });

        TypeThing.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Food", "Jewel" }));
        TypeThing.setSelectedIndex(-1);
        TypeThing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypeThingActionPerformed(evt);
            }
        });

        Xcreature.setText("X:");

        Ycreature.setText("Y:");

        PitchCreature.setText("Pitch:");

        NewThing.setText("New Thing");
        NewThing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewThingActionPerformed(evt);
            }
        });

        Xthing.setText("X:");

        Ything.setText("Y:");

        NewBrick.setText("New Brick");
        NewBrick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewBrickActionPerformed(evt);
            }
        });

        ItemBrick.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 - Red", "1 - Green", "2 - Blue", "3 - Yellow", "4 - Magenta", "5 - White" }));
        ItemBrick.setSelectedIndex(-1);

        X1brick.setText("X1:");

        Y1brick.setText("Y1:");

        X2brick.setText("X2:");

        Y2brick.setText("Y2:");

        ItemCreatures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemCreaturesActionPerformed(evt);
            }
        });

        ControlPanel.setColumns(20);
        ControlPanel.setRows(5);
        jScrollPane1.setViewportView(ControlPanel);

        NewPoint.setText("New Point");
        NewPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewPointActionPerformed(evt);
            }
        });

        jLabel1.setText("X:");

        jLabel2.setText("Y:");

        jLabel3.setText("Vel:");

        valueListThings.setToolTipText("");
        jScrollPane2.setViewportView(valueListThings);

        Title.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        Title.setText("Manual Control of the Mind of an Agent");

        ThingsInVision.setText("Things in Vision:");

        Leaflet.setAutoCreateRowSorter(true);
        Leaflet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(Leaflet);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(NewCreature, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(NewThing, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(NewPoint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ItemCreatures, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(NewBrick, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(TypeThing, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(Xcreature)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(valorXcreature, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(ItemBrick, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(Ycreature)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(valorYcreature, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(ItemThing, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(X1brick)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(valorX1Brick, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(PitchCreature)
                                        .addGap(18, 18, 18)
                                        .addComponent(valorPitchCreature, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(100, 100, 100))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(Xthing)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(valorXThing, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(Y1brick)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(valorY1Brick, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(Ything)
                                                    .addComponent(X2brick)))
                                            .addComponent(ThingsInVision))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(valorX2Brick)
                                            .addComponent(valorYthing, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)))
                        .addGap(17, 17, 17)
                        .addComponent(Y2brick)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valorY2Brick, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(valorXmap, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(valorYmap, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valorVelMap, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NewCreature)
                            .addComponent(valorYcreature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valorPitchCreature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Xcreature)
                            .addComponent(valorXcreature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Ycreature)
                            .addComponent(PitchCreature))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TypeThing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valorXThing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valorYthing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NewThing)
                            .addComponent(Xthing)
                            .addComponent(Ything)
                            .addComponent(ItemThing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NewBrick)
                            .addComponent(ItemBrick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valorX1Brick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valorY1Brick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valorX2Brick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valorY2Brick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(X1brick)
                            .addComponent(Y1brick)
                            .addComponent(X2brick)
                            .addComponent(Y2brick))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ItemCreatures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ThingsInVision))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(NewPoint)
                                    .addComponent(valorXmap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(valorYmap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(valorVelMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                        .addGap(85, 85, 85))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void NewCreatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewCreatureActionPerformed
        // TODO add your handling code here:
        try{
            valorX_creature     = Double.parseDouble(valorXcreature.getText());
            valorY_creature     = Double.parseDouble(valorYcreature.getText());
            valorPitch_creature = Double.parseDouble(valorPitchCreature.getText());
            
            Creature creature   = proxy.createCreature(valorX_creature, valorY_creature, valorPitch_creature);
            creature.start();
            creatureList.add(creature);
            //System.out.println(creatureList);
            //for (Creature c : creatureList) {
            //    System.out.println("Criatura: " + c);
            //}        
            updateItemCreatureOptions();
        } catch (Exception e) {
            System.out.println("Error capturado en createCreature: " + e.getMessage() );
        }
    }//GEN-LAST:event_NewCreatureActionPerformed

    private void TypeThingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypeThingActionPerformed
        // TODO add your handling code here:
        String ThingSelected = (String) TypeThing.getSelectedItem();
        updateItemThingOptions(ThingSelected);
    }//GEN-LAST:event_TypeThingActionPerformed

    private void updateItemThingOptions(String ThingSelected) {
        ItemThing.removeAllItems();
        
        if (ThingSelected.equals("Food")) {
            ItemThing.addItem("0 - Perishable");
            ItemThing.addItem("1 - Non-Perishable");
        } else if (ThingSelected.equals("Jewel")) {
            ItemThing.addItem("0 - Red");
            ItemThing.addItem("1 - Green");
            ItemThing.addItem("2 - Blue");
            ItemThing.addItem("3 - Yellow");
            ItemThing.addItem("4 - Magenta");
            ItemThing.addItem("5 - White");
        }
    }
    
    private void updateItemCreatureOptions() {
        ItemCreatures.removeAllItems();
        
        for (Creature creature : creatureList) {
            ItemCreatures.addItem(creature.getIndex());
        }
        
        ItemCreatures.setSelectedItem(null);
    }
    
    /*private void getCurrentVisibleThings(){
        StringBuilder sb = new StringBuilder();
        
        Object selectedItem = ItemCreatures.getSelectedItem();
        //Integer selectedItem   = Integer.parseInt((String) ItemCreatures.getSelectedItem());
        System.out.println(selectedItem);
        if (selectedItem != null){
            try {
                Creature selectedCreature = creatureList.get(Integer.parseInt((String) selectedItem));
                for (Thing t : selectedCreature.getThingsInVision()){
                    System.out.println("paso 1");
                    sb.append(" ").append(t.getName());
                    System.out.println("paso 2");
                    currentVisibleThings = sb.toString();
                    System.out.println("paso 3");
                    System.out.println(currentVisibleThings);
                    System.out.println("paso 4");
                }
            }catch (Exception e){
                System.out.println("Error capturado en CurrentVisibleThings: " + e.getMessage());
 
            }
        }
    }*/
    
    public void updateJList(List<Thing> things) {
        DefaultListModel<String> listModel = new DefaultListModel<>();

        for (Thing t : things) {
            listModel.addElement(t.getName());
        }
        selectedCreature.updateState();
        valueListThings.setModel(listModel);
    }
    
    
    private void NewThingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewThingActionPerformed
        // TODO add your handling code here:
        try {
            valorType_thing      = ItemThing.getSelectedIndex();
            valorX_thing         = Double.parseDouble(valorXThing.getText());
            valorY_thing         = Double.parseDouble(valorYthing.getText());
            
            String ThingSelected = (String) TypeThing.getSelectedItem();
            
            if (ThingSelected.equals("Food")) {
                World.createFood((int) valorType_thing, valorX_thing, valorY_thing);
            } else if (ThingSelected.equals("Jewel")) {
                World.createJewel((int) valorType_thing, valorX_thing, valorY_thing);
            }
        } catch (Exception e) {
            System.out.println("Error capturado en createThing: " + e.getMessage());
        }
    }//GEN-LAST:event_NewThingActionPerformed

    private void NewBrickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewBrickActionPerformed
        // TODO add your handling code here:
        try {
            valorItem_brick       = ItemBrick.getSelectedIndex();
            valorX1_brick         = Double.parseDouble(valorX1Brick.getText());
            valorY1_brick         = Double.parseDouble(valorY1Brick.getText());
            valorX2_brick         = Double.parseDouble(valorX2Brick.getText());
            valorY2_brick         = Double.parseDouble(valorY2Brick.getText());
                       
            World.createBrick( (int) valorItem_brick, valorX1_brick, valorY1_brick, valorX2_brick, valorY2_brick);
            
        } catch (Exception e) {
            System.out.println("Error capturado en createThing: " + e.getMessage());
        }
    }//GEN-LAST:event_NewBrickActionPerformed

    private void NewPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewPointActionPerformed
        // TODO add your handling code here:
        try {
            valorX_map              = Double.parseDouble(valorXmap.getText());
            valorY_map              = Double.parseDouble(valorYmap.getText());
            valorLinearVelocity_map = Double.parseDouble(valorVelMap.getText());
            
            //System.out.println(valorX_map + " " +  valorY_map);
            
            //Creature selectedCreature = creatureList.get(Integer.parseInt((String) ItemCreatures.getSelectedItem()));
            app.setSelectedCreature(creatureList.get(Integer.parseInt((String) ItemCreatures.getSelectedItem())));
            selectedCreature = app.getSelectedCreature();
            //System.out.println("selectedCreature en app: " + app.getSelectedCreature());
            
            // selectedCreature.moveto(valorLinearVelocity_map, valorX_map, valorY_map);
            System.out.println("Selected Creature: " + selectedCreature);
            if (selectedCreature != null) {
                selectedCreature.moveto(valorLinearVelocity_map, valorX_map, valorY_map);
                System.out.println("Vel: " + valorLinearVelocity_map + " ,X_map: " + valorX_map + " ,Y_map: " + valorY_map );
            } else {
                System.out.println("Ninguna criatura seleccionada.");
            }
            
        } catch (Exception e) {
            System.out.println("Error capturado en newPoint: " + e.getMessage());
        }
    }//GEN-LAST:event_NewPointActionPerformed

    private void ItemCreaturesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemCreaturesActionPerformed
        // TODO add your handling code here:
        //StringBuilder sb = new StringBuilder();

        //Creature selectedCreature = creatureList.get(Integer.parseInt((String) ItemCreatures.getSelectedItem()));
        
        //for (Thing t : selectedCreature.getThingsInVision()) {
        //    sb.append(" ").append(t.getName());
        //}

        //currentVisibleThings = sb.toString();
        //System.out.println(currentVisibleThings);
        
        /*
        int selectedIndex = ItemCreatures.getSelectedIndex();
        if (selectedIndex == -1) {
            System.out.println("No hay criatura seleccionada.");
        }
        List<Creature> creatures = app.getCreatureList();
        if (selectedIndex >= creatures.size()){
            System.out.println("Indice fuera de rango");
        }
        
        DefaultListModel<String> model = (DefaultListModel<String>) valueListThings.getModel();
        model.clear();
        
        for (Thing t : app.getSelectedCreature().getThingsInVision()){
            model.addElement(t.getName());
        
        */
        
        //System.out.println("Tipo de ItemCreatures.getSelectedItem(): " + ItemCreatures.getSelectedItem().getClass().getName());
        
        //app.setSelectedCreature(creatureList.get(Integer.parseInt((String) ItemCreatures.getSelectedItem())));
        //app.setSelectedCreature(creatureList.get(ItemCreatures.getSelectedIndex()));
        //selectedCreature = app.getSelectedCreature(); 
        
        //System.out.println("Sel. Cre.: " + selectedCreature);
        
        ///////////////////////////////////////////////////////////////////
        ///
        ///                  DESCOMENTAR                                ///
        ///
        ///////////////////////////////////////////////////////////////////
        
       /* try {
           if (creatureList != null && !creatureList.isEmpty() && app.getSelectedCreature() != null) {
                app.setSelectedCreature(creatureList.get(Integer.parseInt((String) ItemCreatures.getSelectedItem())));
                selectedCreature = app.getSelectedCreature();        
                selectedCreature.updateState();
                selectedCreature.move(0.1, 0.1, 0);
                selectedCreature.move(0, 0, 0);                
                List<Thing> thingsInVision = selectedCreature.getThingsInVision();    
                updateJList(thingsInVision);
            }            
        } catch (Exception e) {
            System.out.println("Error in ItemCreatures: " + e.getMessage());
        }*/
    }//GEN-LAST:event_ItemCreaturesActionPerformed

        @Override
        public void keyTyped(KeyEvent ke) {
            //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            //System.out.println("keyTyped");
        }

        @Override
        public void keyPressed(KeyEvent ke) {
            //System.out.println("keyPressed");
            //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            int keyCode = ke.getKeyCode();
            
            try {
                //Creature selectedCreature = (Creature) ItemCreatures.getSelectedItem();
                //Creature selectedCreature = creatureList.get(Integer.parseInt((String) ItemCreatures.getSelectedItem()));
                app.setSelectedCreature(creatureList.get(Integer.parseInt((String) ItemCreatures.getSelectedItem())));
                selectedCreature = app.getSelectedCreature();
                
                if (selectedCreature != null) {
                    switch(keyCode){
                        case KeyEvent.VK_UP:
                            linearVelocityRightWheel = 0.5; //+
                            linearVelocityLeftWheel  = 0.5;
                            angularVelocityCreature  = 0;
                            selectedCreature.move(linearVelocityRightWheel, linearVelocityLeftWheel, angularVelocityCreature);
                            //System.out.println("Key Up pressed");
                            break;
                        case KeyEvent.VK_DOWN:
                            linearVelocityRightWheel = -0.5; //-
                            linearVelocityLeftWheel  = -0.5;
                            angularVelocityCreature  = 0;
                            selectedCreature.move(linearVelocityRightWheel, linearVelocityLeftWheel, angularVelocityCreature);
                            //System.out.println("Key Down pressed");
                            break;
                        case KeyEvent.VK_RIGHT:
                            linearVelocityRightWheel = 0; //-
                            linearVelocityLeftWheel  = 0;
                            angularVelocityCreature  = -0.5;
                            selectedCreature.rotate(angularVelocityCreature);
                            //System.out.println("Key Right pressed");
                            break;
                        case KeyEvent.VK_LEFT:
                            linearVelocityRightWheel = 0; //+
                            linearVelocityLeftWheel  = 0;
                            angularVelocityCreature  = 0.5;
                            //System.out.println("Key Left pressed");
                            selectedCreature.rotate(angularVelocityCreature);
                            break;
                        case KeyEvent.VK_P:
                            linearVelocityRightWheel = 0;
                            linearVelocityLeftWheel  = 0;
                            angularVelocityCreature  = 0;
                            selectedCreature.move(linearVelocityRightWheel, linearVelocityLeftWheel, angularVelocityCreature);
                            selectedCreature.rotate(angularVelocityCreature);
                        default:
                            break;
                    }
                   // selectedCreature.move(linearVelocityRightWheel, linearVelocityLeftWheel, angularVelocityCreature);
                   // selectedCreature.rotate(angularVelocityCreature);
                   // System.out.println(linearVelocityLeftWheel);
                } else {
                    System.out.println("Ninguna criatura seleccionada.");
                }
            } catch (Exception e) {
                System.out.println("Error capturado en move: " + e.getMessage());
            }
        }

        @Override
        public void keyReleased(KeyEvent ke) {
            //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
            //System.out.println("keyReleased");
        }
        
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ControladorManual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ControladorManual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ControladorManual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ControladorManual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//           public void run() {
//                new ControladorManual().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ControlPanel;
    private javax.swing.JComboBox<String> ItemBrick;
    private javax.swing.JComboBox<String> ItemCreatures;
    private javax.swing.JComboBox<String> ItemThing;
    private javax.swing.JTable Leaflet;
    private javax.swing.JButton NewBrick;
    private javax.swing.JButton NewCreature;
    private javax.swing.JButton NewPoint;
    private javax.swing.JButton NewThing;
    private javax.swing.JLabel PitchCreature;
    private javax.swing.JLabel ThingsInVision;
    private javax.swing.JLabel Title;
    private javax.swing.JComboBox<String> TypeThing;
    private javax.swing.JLabel X1brick;
    private javax.swing.JLabel X2brick;
    private javax.swing.JLabel Xcreature;
    private javax.swing.JLabel Xthing;
    private javax.swing.JLabel Y1brick;
    private javax.swing.JLabel Y2brick;
    private javax.swing.JLabel Ycreature;
    private javax.swing.JLabel Ything;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField valorPitchCreature;
    private javax.swing.JTextField valorVelMap;
    private javax.swing.JTextField valorX1Brick;
    private javax.swing.JTextField valorX2Brick;
    private javax.swing.JTextField valorXThing;
    private javax.swing.JTextField valorXcreature;
    private javax.swing.JTextField valorXmap;
    private javax.swing.JTextField valorY1Brick;
    private javax.swing.JTextField valorY2Brick;
    private javax.swing.JTextField valorYcreature;
    private javax.swing.JTextField valorYmap;
    private javax.swing.JTextField valorYthing;
    private javax.swing.JList<String> valueListThings;
    // End of variables declaration//GEN-END:variables

    
}

